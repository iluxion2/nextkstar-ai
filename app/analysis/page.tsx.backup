'use client'

import { useState, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { 
  Upload, 
  Camera, 
  Brain, 
  Sparkles, 
  Star, 
  Share2, 
  Download,
  Eye,
  TrendingUp,
  Heart,
  Target,
  Zap,
  ArrowLeft,
  CheckCircle,
  AlertCircle
} from 'lucide-react'
import { useDropzone } from 'react-dropzone'
import Webcam from 'react-webcam'
import toast from 'react-hot-toast'
import Confetti from 'react-confetti'
import AnalysisResults from '../components/AnalysisResults'
import BiasAnalysis from '../components/BiasAnalysis'
import CelebrityMatch from '../components/CelebrityMatch'
import Leaderboard from '../components/Leaderboard'
import LanguageSelector from '../components/LanguageSelector'
import { getTranslation } from '../utils/translations'

interface AnalysisResult {
  beautyScore: number
  facialFeatures: {
    symmetry: number
    skinClarity: number
    proportions: number
    expression: number
  }
  personalityTraits: {
    confidence: number
    friendliness: number
    intelligence: number
    attractiveness: number
  }
  biasAnalysis: {
    korean: number
    western: number
    global: number
    anime: number
  }
  celebrityMatches: Array<{
    name: string
    image: string
    similarity: number
    category: string
  }>
}

export default function AnalysisPage() {
  const [selectedImage, setSelectedImage] = useState<string | null>(null)
  const [isAnalyzing, setIsAnalyzing] = useState(false)
  const [analysisResult, setAnalysisResult] = useState<AnalysisResult | null>(null)
  const [showWebcam, setShowWebcam] = useState(false)
  const [language, setLanguage] = useState('en')
  const [showConfetti, setShowConfetti] = useState(false)
  const webcamRef = useRef<Webcam>(null)

  const onDrop = (acceptedFiles: File[]) => {
    const file = acceptedFiles[0]
    if (file) {
      const reader = new FileReader()
      reader.onload = (e) => {
        setSelectedImage(e.target?.result as string)
      }
      reader.readAsDataURL(file)
    }
  }

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.gif']
    },
    multiple: false
  })

  const capturePhoto = () => {
    if (webcamRef.current) {
      const imageSrc = webcamRef.current.getScreenshot()
      if (imageSrc) {
        setSelectedImage(imageSrc)
        setShowWebcam(false)
      }
    }
  }

  const analyzeImage = async () => {
    if (!selectedImage) return

    setIsAnalyzing(true)
    setShowConfetti(false)

    try {
      // Convert base64 to blob
      const base64Response = await fetch(selectedImage)
      const blob = await base64Response.blob()

      const formData = new FormData()
      formData.append('image', blob, 'image.jpg')

      const response = await fetch('http://localhost:8000/analyze', {
        method: 'POST',
        body: formData,
      })

      if (!response.ok) {
        throw new Error('Analysis failed')
      }

      const result = await response.json()
      setAnalysisResult(result)
      setShowConfetti(true)
      
      toast.success(getTranslation('Analysis completed!', language))
    } catch (error) {
      console.error('Analysis error:', error)
      toast.error(getTranslation('Analysis failed. Please try again.', language))
    } finally {
      setIsAnalyzing(false)
    }
  }

  const downloadResults = () => {
    if (!analysisResult) return

    const dataStr = JSON.stringify(analysisResult, null, 2)
    const dataBlob = new Blob([dataStr], { type: 'application/json' })
    const url = URL.createObjectURL(dataBlob)
    const link = document.createElement('a')
    link.href = url
    link.download = 'face-analysis-results.json'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  const resetAnalysis = () => {
    setSelectedImage(null)
    setAnalysisResult(null)
    setShowConfetti(false)
    setShowWebcam(false)
  }

  if (analysisResult) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4">
        {showConfetti && <Confetti />}
        
        <div className="max-w-6xl mx-auto">
          {/* Header */}
          <div className="flex justify-between items-center mb-8">
            <button
              onClick={resetAnalysis}
              className="flex items-center space-x-2 text-gray-600 hover:text-gray-800 transition-colors"
            >
              <ArrowLeft size={20} />
              <span>{getTranslation('New Analysis', language)}</span>
            </button>
            
            <div className="flex items-center space-x-4">
              <LanguageSelector currentLanguage={language} onLanguageChange={setLanguage} />
              
              <button
                onClick={downloadResults}
                className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors"
              >
                <Download size={16} />
                <span>{getTranslation('Download', language)}</span>
              </button>
            </div>
          </div>

          {/* Results Grid */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Left Column */}
            <div className="space-y-6">
              <AnalysisResults result={analysisResult} language={language} />
              <BiasAnalysis biasAnalysis={analysisResult.biasAnalysis} language={language} />
            </div>

            {/* Right Column */}
            <div className="space-y-6">
              <CelebrityMatch celebrityMatches={analysisResult.celebrityMatches} language={language} />
              <Leaderboard language={language} />
            </div>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 p-4">
      <div className="max-w-4xl mx-auto">
        {/* Header */}
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-800">
            {getTranslation('AI Face Analysis', language)}
          </h1>
          <LanguageSelector currentLanguage={language} onLanguageChange={setLanguage} />
        </div>

        {/* Upload Section */}
        <div className="bg-white rounded-2xl shadow-xl p-8 mb-8">
          <div className="text-center mb-8">
            <div className="flex justify-center mb-4">
              <div className="p-4 bg-blue-100 rounded-full">
                <Brain className="w-8 h-8 text-blue-600" />
              </div>
            </div>
            <h2 className="text-2xl font-bold mb-2">
              {getTranslation('Upload Your Photo', language)}
            </h2>
            <p className="text-gray-600">
              {getTranslation('Get detailed AI analysis of your facial features, beauty score, and celebrity matches', language)}
            </p>
          </div>

          {/* Upload Options */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* File Upload */}
            <div
              {...getRootProps()}
              className={`border-2 border-dashed rounded-xl p-8 text-center cursor-pointer transition-all ${
                isDragActive
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-300 hover:border-blue-400 hover:bg-gray-50'
              }`}
            >
              <input {...getInputProps()} />
              <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">
                {getTranslation('Upload Photo', language)}
              </h3>
              <p className="text-gray-500 text-sm">
                {getTranslation('Drag & drop or click to select', language)}
              </p>
            </div>

            {/* Camera Capture */}
            <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center">
              <Camera className="w-12 h-12 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-semibold mb-2">
                {getTranslation('Take Photo', language)}
              </h3>
              <p className="text-gray-500 text-sm mb-4">
                {getTranslation('Use your camera', language)}
              </p>
              <button
                onClick={() => setShowWebcam(true)}
                className="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                {getTranslation('Open Camera', language)}
              </button>
            </div>
          </div>

          {/* Selected Image Preview */}
          {selectedImage && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              className="mt-8 text-center"
            >
              <div className="relative inline-block">
                <img
                  src={selectedImage}
                  alt="Selected"
                  className="max-w-xs rounded-lg shadow-lg"
                />
                <button
                  onClick={resetAnalysis}
                  className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600 transition-colors"
                >
                  <AlertCircle size={16} />
                </button>
              </div>
              
              <div className="mt-6">
                <button
                  onClick={analyzeImage}
                  disabled={isAnalyzing}
                  className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-8 py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2 mx-auto"
                >
                  {isAnalyzing ? (
                    <>
                      <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                      <span>{getTranslation('Analyzing...', language)}</span>
                    </>
                  ) : (
                    <>
                      <Sparkles size={20} />
                      <span>{getTranslation('Start Analysis', language)}</span>
                    </>
                  )}
                </button>
              </div>
            </motion.div>
          )}
        </div>

        {/* Features */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-white rounded-xl p-6 text-center shadow-lg">
            <div className="bg-purple-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4">
              <Star className="w-6 h-6 text-purple-600" />
            </div>
            <h3 className="font-semibold mb-2">{getTranslation('Beauty Score', language)}</h3>
            <p className="text-gray-600 text-sm">
              {getTranslation('AI-powered beauty analysis', language)}
            </p>
          </div>

          <div className="bg-white rounded-xl p-6 text-center shadow-lg">
            <div className="bg-green-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4">
              <Eye className="w-6 h-6 text-green-600" />
            </div>
            <h3 className="font-semibold mb-2">{getTranslation('Facial Features', language)}</h3>
            <p className="text-gray-600 text-sm">
              {getTranslation('Detailed feature analysis', language)}
            </p>
          </div>

          <div className="bg-white rounded-xl p-6 text-center shadow-lg">
            <div className="bg-orange-100 w-12 h-12 rounded-full flex items-center justify-center mx-auto mb-4">
              <Heart className="w-6 h-6 text-orange-600" />
            </div>
            <h3 className="font-semibold mb-2">{getTranslation('Celebrity Matches', language)}</h3>
            <p className="text-gray-600 text-sm">
              {getTranslation('Find your celebrity lookalikes', language)}
            </p>
          </div>
        </div>
      </div>

      {/* Webcam Modal */}
      <AnimatePresence>
        {showWebcam && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4"
          >
            <motion.div
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.9, opacity: 0 }}
              className="bg-white rounded-2xl p-6 max-w-md w-full"
            >
              <div className="text-center mb-4">
                <h3 className="text-xl font-semibold mb-2">
                  {getTranslation('Take a Photo', language)}
                </h3>
                <p className="text-gray-600">
                  {getTranslation('Position your face in the frame', language)}
                </p>
              </div>

              <div className="mb-4">
                <Webcam
                  ref={webcamRef}
                  screenshotFormat="image/jpeg"
                  className="w-full rounded-lg"
                />
              </div>

              <div className="flex space-x-4">
                <button
                  onClick={() => setShowWebcam(false)}
                  className="flex-1 bg-gray-500 text-white py-2 rounded-lg hover:bg-gray-600 transition-colors"
                >
                  {getTranslation('Cancel', language)}
                </button>
                <button
                  onClick={capturePhoto}
                  className="flex-1 bg-blue-600 text-white py-2 rounded-lg hover:bg-blue-700 transition-colors"
                >
                  {getTranslation('Capture', language)}
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
} 